10) Write a program to light a Led connected port C15 using an interrupt.

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"

void Init_LED() // Initialize GPIO pins
{
	DrvGPIO_Open(E_GPC, 15, E_IO_OUTPUT); // GPC15 pin set to output mode
	DrvGPIO_SetBit(E_GPC, 15);            // Goutput Hi to turn off LED
}

int main (void)
{
	UNLOCKREG();			    // unlock register for programming
  DrvSYS_Open(48000000);// set System Clock to run at 48MHz 
	                      // 12MHz crystal input, PLL output 48MHz
	LOCKREG();				    // lock register from programming

  Init_LED();        // Initialize LEDs (four on-board LEDs below LCD panel)	
	while (1)				   // forever loop to keep flashing four LEDs one at a time
	{
	DrvGPIO_ClrBit(E_GPC, 15); // output Low to turn on LED
	DrvSYS_Delay(300000);
	DrvGPIO_SetBit(E_GPC, 15);
	DrvSYS_Delay(300000);
	}
}



11) Write a program to toggle a led connected to port C12.and also to buzzer when interrupt is given at port b11.

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"

void Init_LED() // Initialize GPIO pins
{
	DrvGPIO_Open(E_GPC, 12, E_IO_OUTPUT); 
	DrvGPIO_SetBit(E_GPC, 12);            
	DrvGPIO_Open(E_GPC, 13, E_IO_OUTPUT); 
	DrvGPIO_SetBit(E_GPC, 13); 
	DrvGPIO_Open(E_GPC, 14, E_IO_OUTPUT); 
	DrvGPIO_SetBit(E_GPC, 14); 
	DrvGPIO_Open(E_GPC, 15, E_IO_OUTPUT);
	DrvGPIO_SetBit(E_GPC, 15); 
}
void Init_Buzzer()
{
    DrvGPIO_Open(E_GPB, 11, E_IO_OUTPUT);
    DrvGPIO_SetBit(E_GPB, 11);
}

int main (void)
{
	int i=0,j=12;
	UNLOCKREG();			    // unlock register for programming
  DrvSYS_Open(48000000);// set System Clock to run at 48MHz 
	                      // 12MHz crystal input, PLL output 48MHz
	LOCKREG();				    // lock register from programming

  Init_LED();        // Initialize LEDs (four on-board LEDs below LCD panel)	
  Init_Buzzer();
	while (i<10&&j<16)				   // forever loop to keep flashing four LEDs one at a time
	{
	i++;
	DrvGPIO_ClrBit(E_GPC, j); // output Low to turn on LED
	DrvSYS_Delay(300000);	   // delay 
	DrvGPIO_SetBit(E_GPC, j); // output Hi to turn off LED
	DrvSYS_Delay(300000);	   // delay
	DrvGPIO_ClrBit(E_GPB, 11);
	DrvSYS_Delay(300000);
	DrvGPIO_SetBit(E_GPB, 11);
	DrvSYS_Delay(300000);
	j++;
	if(i%4==0)
		j=12;
	}
}

12) Write a program to scan the keyboard and to buzzer b11 when key 3 is pressed and light c12 for a brief period when key 2 is pressed.

#include <stdio.h>									
#include "NUC1xx.h"
#include "DrvSYS.h"
#include "Seven_Segment.h"
#include "scankey.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"

void Init_LED() // Initialize GPIO pins
{
	DrvGPIO_Open(E_GPC, 12, E_IO_OUTPUT); // GPC15 pin set to output mode
	DrvGPIO_SetBit(E_GPC, 12);            // Goutput Hi to turn off LED
}
void Init_Buzzer()
{
    DrvGPIO_Open(E_GPB, 11, E_IO_OUTPUT);
    DrvGPIO_SetBit(E_GPB, 11);
}

int32_t main (void)
{
	int8_t number;
	
	UNLOCKREG();
  DrvSYS_Open(48000000);
	LOCKREG();
	
	 Init_LED();        // Initialize LEDs (four on-board LEDs below LCD panel)	
     Init_Buzzer();

	OpenKeyPad();//????						
	
	while(1)
	{
	  number = Scankey();           // scan keypad to get a number (1~9)
	  if(number==3)
      {
	   DrvGPIO_ClrBit(E_GPB, 11);
	DrvSYS_Delay(300000);
	DrvGPIO_SetBit(E_GPB, 11);
	DrvSYS_Delay(300000);
       }	
      else if(number==2)
       {
	   DrvGPIO_ClrBit(E_GPC, 12); // output Low to turn on LED
	DrvSYS_Delay(300000);	   // delay 
	DrvGPIO_SetBit(E_GPC, 12); // output Hi to turn off LED
	DrvSYS_Delay(300000);
	 }
	
	}
}

13) Write a program to display on LCD a string “welcome to msrit”.

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"
#include "NUC1xx-LB_002\LCD_Driver.h" //????

int main(void)
{
	UNLOCKREG();
	DrvSYS_Open(48000000); // set to 48MHz
	LOCKREG(); 

	Initial panel(); 
	clr_all_panel();
	
	print_lcd(0, "Welcome to MSRIT");						
}
14) Write a program to use ADC to display the analog voltage connected to variable resistor on channel 7 of port A.

#include <stdio.h>									#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Seven_Segment.h"

void InitADC(void)
{
	/* Step 1. GPIO initial */ 
	GPIOA->OFFD|=0x00800000; 	//Disable digital input path
	SYS->GPAMFP.ADC7_SS21_AD6=1; 		//Set ADC function 
				
	/* Step 2. Enable and Select ADC clock source, and then enable ADC module */          
	SYSCLK->CLKSEL1.ADC_S = 2;	//Select 22Mhz for ADC
	SYSCLK->CLKDIV.ADC_N = 1;	//ADC clock source = 22Mhz/2 =11Mhz;
	SYSCLK->APBCLK.ADC_EN = 1;	//Enable clock source
	ADC->ADCR.ADEN = 1;			//Enable ADC module

	/* Step 3. Select Operation mode */
	ADC->ADCR.DIFFEN = 0;   	//single end input
	ADC->ADCR.ADMD   = 0;   	//single mode
		
	/* Step 4. Select ADC channel */
	ADC->ADCHER.CHEN = 0x80;
	
	/* Step 5. Enable ADC interrupt */
	ADC->ADSR.ADF =1;   		//clear the A/D interrupt flags for safe 
	ADC->ADCR.ADIE = 1;
//	NVIC_EnableIRQ(ADC_IRQn);
	
	/* Step 6. Enable WDT module */
	ADC->ADCR.ADST=1;
}
void seg_display(int16_t value)
{
	int8_t digit;
	digit = value / 1000;
	close_seven_segment();
	show_seven_segment(3,digit);
	DrvSYS_Delay(5000);
	value = value - digit * 1000;
	digit = value / 100;
	close_seven_segment();
	show_seven_segment(2,digit);
	DrvSYS_Delay(5000);
value = value - digit * 100;
	digit = value / 10;
	close_seven_segment();
	show_seven_segment(1,digit);
	DrvSYS_Delay(5000);
value = value - digit * 10;
	digit = value;
	close_seven_segment();
	show_seven_segment(0,digit);
	DrvSYS_Delay(5000);
}
int32_t main (void)
{
	int32_t adc_value;
	
	UNLOCKREG();
	SYSCLK->PWRCON.XTL12M_EN = 1; 	//Enable 12Mhz and set HCLK->12Mhz
	SYSCLK->CLKSEL0.HCLK_S = 0;
	LOCKREG();

	InitADC();						
	
	while(1)
	{
		while(ADC->ADSR.ADF==0);	 // ADC Flag, wait till 1 (A/DC conversion done)
		ADC->ADSR.ADF=1;			 // write 1 to ADF is to clear the flag
		
		adc_value=ADC->ADDR[7].RSLT; // input 12-bit ADC value
		seg_display(adc_value);      // display value to 7-segment display
		
		ADC->ADCR.ADST=1;            // activate next ADC sample
		                             // 1 : conversion start
									               // 0 : conversion stopped, ADC enter idle state
	}
}

15) Display the analog voltage in terms of analog on the LCD of the variable resistor connected to ADC channel 7.

#include <stdio.h>									#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Seven_Segment.h"
#include "DrvADC.h"
#include "LCD_Driver.h"

	
 int32_t main (void)
{  uint16_t value;  
    char TEXT[16];			
	
	UNLOCKREG();
	SYSCLK->PWRCON.XTL12M_EN = 1; 	//Enable 12Mhz and set HCLK->12Mhz
	SYSCLK->CLKSEL0.HCLK_S = 0;
	LOCKREG();
	Initial_panel();  // initialize LCD panel
  clr_all_panel();  // clear LCD panel 
  print_lcd(0,"variable resistor");

	DrvADC_Open(ADC_SINGLE_END,ADC_SINGLE_OP , 0x80,INTERNAL_HCLK , 1); 	
	while(1)
   {
    DrvADC_StartConvert();   // start A/D conversion
    while(DrvADC_IsConversionDone()==FALSE);
    value = ADC->ADDR[7].RSLT & 0xFFF;    

sprintf(TEXT,"Value: %d",value); // convert ADC0 value into text
    print_lcd(1, TEXT); // output TEXT to LCD

    }
}





16) Write a program to scan the key board and display the key that is pressed on lcd or seven segment.	

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"
#include "NUC1xx-LB_002\LCD_Driver.h"//????

int main(void)
{
    int number;
	char text[100];
	UNLOCKREG();
	DrvSYS_Open(48000000); // set to 48MHz
	LOCKREG(); 

	Initial_panel(); 
	clr_all_panel();
	
	while(1)
	{
	  number=Scankey();
	  if(number!=0) 
		{
			sprintf(text,"Number is : %d",number);
	    print_lcd(0, text);	
		}
  }		
}				
	


17) Write a program to display on seven segment counts 0 to 99.

#include <stdio.h>									#include "NUC1xx.h"
#include "DrvSYS.h"
#include "Seven_Segment.h"

// display an integer on four 7-segment LEDs
void seg_display(int16_t value)
{
	close_seven_segment();
	show_seven_segment(0,value);
	DrvSYS_Delay(50000);
	
	close_seven_segment();
	show_seven_segment(1,value);
	DrvSYS_Delay(50000);
	
	close_seven_segment();
	show_seven_segment(2,value);
	DrvSYS_Delay(50000);
	
	close_seven_segment();
	show_seven_segment(3,value);
	DrvSYS_Delay(50000);
}
int32_t main (void)
{
	uint32_t i=0;
	
	UNLOCKREG();           // Unlock System Registers
	DrvSYS_Open(48000000); // set CPU clock to 25~50MHz
	LOCKREG();	           // Lock System Registers
	while(1) 
	{
  DrvSYS_Delay(100000);
	seg_display(i);
	i++;
	if (i>9) i=0;	
	}
}



